;; Query Builders
def query-archived     {.archived true}
def query-not-archived {.archived false}

def query-completed-at-start value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-completed-at-start expects a date-time, but received a " (type dt)))
 {.completed_at_start dt})
def query-completed-at-after value query-completed-at-start

def query-completed-at-end value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-completed-at-start expects a date-time, but received a " (type dt)))
 {.completed_at_end dt})
def query-completed-at-before value query-completed-at-end

def query-created-at-start value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-created-at-start expects a date-time, but received a " (type dt)))
 {.created_at_start dt})
def query-created-at-after value query-created-at-start

def query-created-at-end value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-created-at-start expects a date-time, but received a " (type dt)))
 {.created_at_end dt})
def query-created-at-before value query-created-at-end

def query-deadline-at-start value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-deadline-at-start expects a date-time, but received a " (type dt)))
 {.deadline_at_start dt})
def query-deadline-at-after value query-deadline-at-start

def query-deadline-at-end value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-deadline-at-start expects a date-time, but received a " (type dt)))
 {.deadline_at_end dt})
def query-deadline-at-before value query-deadline-at-end

def query-epic  value (fn [epic] {.epic_id epic})
def query-epics value (fn [epics] {.epic_ids epics})

def query-estimate value (fn [estimate] {.estimate estimate})
def query-external-id value (fn [external-id] {.external_id external-id})

def query-group value (fn [group] {.group_id group})
def query-team value (fn [team] {.team_id team})
def query-groups value (fn [groups] {.group_ids groups})
def query-teams value (fn [teams] {.team_ids teams})

def query-includes-description {.includes_description true}
def query-not-include-description {.includes_description true}

def query-iteration  value (fn [iteration] {.iteration_id iteration})
def query-iterations value (fn [iterations] {.iteration_ids iterations})

def query-label-name value (fn [label-name] {.label_name label-name})
def query-labels value (fn [labels] {.label_ids labels})


def query-owner value (fn [member]
 (assert (subset? [(type member)] ["member" "string"]) 
         (concat "query-owned-by expects a member (or its ID), but received a " (type member)))
 {.owner_id member})

def query-owners value (fn [members]
  (assert (= "list" (type members))
          (concat "query-owners expects a list, but received a " (type members)))
  (assert (subset? (distinct (map members %(type %))) ["member" "string"])
          (concat "query-owners expects a list of members, but received a list with types " (map members type)))
  {.owner_ids members})

def query-requested-by value (fn [member]
 (assert (subset? [(type member)] ["member" "string"])
         (concat "query-requested-by expects a member, but received a " (type member)))
 {.requested_by_id member})

def query-bug                {.story_type "bug"}
def query-story-type-bug     {.story_type "bug"}
def query-chore              {.story_type "chore"}
def query-story-type-chore   {.story_type "chore"}
def query-feature            {.story_type "feature"}
def query-story-type-feature {.story_type "feature"}

def query-updated-at-start value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-updated-at-start expects a date-time, but received a " (type dt)))
 {.updated_at_start dt})
def query-updated-at-after value query-updated-at-start

def query-updated-at-end value (fn [dt]
 (assert (= "date-time" (type dt))
         (concat "query-updated-at-start expects a date-time, but received a " (type dt)))
 {.updated_at_at_end dt})
def query-updated-at-before value query-updated-at-end

def query-workflow-state value (fn [workflow-state] {.workflow_state_id workflow-state})
def query-state value (fn [workflow-state] {.workflow_state_id workflow-state})

def query-workflow-state-types value (fn [wf-state-types] {.workflow_state_types wf-state-types})
def query-state-types          value (fn [wf-state-types] {.workflow_state_types wf-state-types})

def query-unfinished   {.workflow_state_types ["unstarted" "started"]}
def query-incomplete   query-unfinished
def query-not-done     query-unfinished
def query-not-finished query-unfinished

def epic-is-unstarted   {.state "to do"}
def epic-is-todo        {.state "to do"}
def epic-is-in-progress {.state "in progress"}
def epic-is-started     {.state "in progress"}
def epic-is-done        {.state "done"}
def epic-is-finished    {.state "done"}
def epic-is-completed   {.state "done"}

def story-is-unstarted   {[.workflow_state_id .type] "unstarted"}
def story-is-todo        {[.workflow_state_id .type] "unstarted"}
def story-is-in-progress {[.workflow_state_id .type] "started"}
def story-is-started     {[.workflow_state_id .type] "started"}
def story-is-done        {[.workflow_state_id .type] "done"}
def story-is-finished    {[.workflow_state_id .type] "done"}
def story-is-completed   {[.workflow_state_id .type] "done"}

;; TODO All Story fields as `story-is-*` functions.

def story-is-archived {.archived true}

def iteration-is-unstarted   {.status "unstarted"}
def iteration-is-todo        {.status "unstarted"}
def iteration-is-in-progress {.status "started"}
def iteration-is-started     {.status "started"}
def iteration-is-done        {.status "done"}
def iteration-is-finished    {.status "done"}
def iteration-is-completed   {.status "done"}

; def my-stories               value (fn [] (find-stories {.owner_ids [me] .workflow_state_types ["unstarted" "started"]}))
; def my-iterations            value (fn [] (interpret "my-stories | map .iteration_id | where identity | map fetch "))
; def my-current-iterations    value (fn [] (interpret "my-iterations | where {.status \"started\"} "))
; def my-unfinished-iterations value (fn [] (interpret "my-iterations | where {.status \"done\"} "))
; def my-epics                 value (fn [] (interpret "my-stories | map .epic_id | where identity | map epic | where {.state %(not (= % \"done\"))}"))
; def team-current-iterations  value (fn [team] (interpret "team | iterations | where {.status \"started\"}"))

def -priv-defaults defaults

when (= nil (.team -priv-defaults)) %(println "[INFO] Don't forget to set a default team with `default`")
when (= nil (.workflow -priv-defaults)) %(println "[INFO] Don't forget to set a default workflow with `default`")
when (= nil (.workflow-state -priv-defaults)) %(println "[INFO] Don't forget to set a default workflow state with `default`")

"[INFO] Alpha prelude loaded!"
